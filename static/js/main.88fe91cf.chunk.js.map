{"version":3,"sources":["components/Calendar.js","components/Month.js","components/Items.js","storage.js","App.js","index.js"],"names":["useStyles","makeStyles","calendar","border","report","marginTop","CalendarComponent","date","setDate","items","getChecks","changeCheck","checks","classes","Grid","container","item","xs","onChange","value","view","prev2Label","next2Label","showNavigation","formatDay","tileContent","Typography","getDate","className","variant","length","toFixed","alignContent","getMonth","getFullYear","List","map","ListItem","ListItemAvatar","Checkbox","checked","itemID","id","undefined","includes","color","ListItemText","primary","name","Button","onClick","Date","root","flex","leftNavigation","textAlign","rightNavigation","monthName","Month","changeDate","offset","prevDate","getCheck","tableDate","dateKey","toString","Container","size","dateToCheck","totalChecks","check","percentCompleted","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","align","width","Array","keys","TableBody","index","scope","theme","smallAvatar","spacing","height","palette","getContrastText","grey","backgroundColor","shortList","Items","addEditItem","handleCopyPress","useState","editing","setEditing","fieldItem","setFieldItem","buttonContent","setButtonContent","handleEditAddPress","action","months","Avatar","ListItemSecondaryAction","IconButton","edge","Tooltip","title","TextField","autoFocus","label","event","prevFieldItem","target","handleAddEdit","saveContent","key","data","localStorage","setItem","JSON","stringify","getContent","getItem","parse","flexGrow","appBar","boxShadow","App","setView","setItems","setChecks","useEffect","nextID","object","idToReturn","lastIDs","parseInt","getNextID","dateToChange","prevChecks","prevChecksArray","prevChecksObject","monthKey","getYear","newChecks","filter","checksFor","dateToFetch","checksMonth","checksDay","maxWidth","AppBar","position","Toolbar","newItem","prevItem","prevItems","newItems","forEach","push","createMuiTheme","typography","fontFamily","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.88fe91cf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport Calendar from 'react-calendar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  calendar: {\r\n    border: 'none',\r\n  },\r\n  report: {\r\n    marginTop: 10\r\n  }\r\n}))\r\n\r\nfunction CalendarComponent({ date, setDate, items, getChecks, changeCheck }) {\r\n\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n  const checks = getChecks('day');\r\n\r\n  const percentCompleted = () => {\r\n    return ((checks.length / items.length) * 100).toFixed(2)\r\n  }\r\n\r\n  const getCheck = itemID => {\r\n    if (checks === undefined){\r\n      return false;\r\n    }\r\n\r\n    return checks.includes(itemID);\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container>\r\n\r\n      <Grid item xs={4}>\r\n        <Calendar\r\n          onChange = {setDate}\r\n          value = {date}\r\n          view = {'month'}\r\n          prev2Label = {null}\r\n          next2Label = {null}\r\n          showNavigation = {false}\r\n          formatDay = {() => {\"\"}}\r\n          tileContent = {({ date }) => (<><Typography>{date.getDate()}</Typography></>)}\r\n          className={classes.calendar}\r\n        />\r\n\r\n        <Typography variant=\"h4\" className={classes.report}>\r\n          {percentCompleted()}%\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={8} container alignContent=\"space-between\">\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"h3\">\r\n            { months[date.getMonth()] } {date.getDate()}, {date.getFullYear()}\r\n          </Typography>\r\n          <List>\r\n            { items.map(item => (\r\n              <ListItem key={item.id}>\r\n                <ListItemAvatar>\r\n                  <Checkbox\r\n                    checked={getCheck(item.id)}\r\n                    onChange={() => changeCheck(date, item.id)}\r\n                    color=\"primary\"\r\n                  />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={item.name}\r\n                />\r\n              </ListItem>\r\n            )) }\r\n          </List>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button color=\"inherit\" onClick={() => setDate(new Date())}>Today</Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default CalendarComponent;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flex: 1,\r\n  },\r\n  leftNavigation: {\r\n    textAlign: 'right'\r\n  },\r\n  rightNavigation: {\r\n    textAlign: 'left'\r\n  },\r\n  monthName: {\r\n    textAlign: 'center'\r\n  }\r\n}))\r\n\r\nfunction Month({ date, setDate, items, getChecks, changeCheck }){\r\n\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n  const checks = getChecks('month', date);\r\n\r\n  const classes = useStyles();\r\n\r\n  const percentCompleted = () => {\r\n\r\n    let totalChecks = 0;\r\n    for (const check in checks){\r\n      totalChecks += checks[check].length;\r\n    }\r\n\r\n    let dateToCheck;\r\n\r\n    if (new Date().getMonth() === date.getMonth()){\r\n      dateToCheck = new Date().getDate()\r\n    }\r\n\r\n    else {\r\n      dateToCheck = new Date(date.getFullYear(), date.getMonth()+1, 0).getDate()\r\n    }\r\n\r\n    if (items.length === 0){\r\n      return 0\r\n    }\r\n\r\n    return ((totalChecks/(items.length*dateToCheck))*100).toFixed(2);\r\n  }\r\n\r\n  const changeDate = offset => {\r\n    setDate(prevDate => {\r\n      return new Date(prevDate.getFullYear(), prevDate.getMonth()+offset, 1);\r\n    })\r\n  }\r\n\r\n  const getCheck = (tableDate, itemID) => {\r\n    const dateKey = (tableDate+1).toString();\r\n\r\n    if (checks[dateKey] === undefined){\r\n      return false;\r\n    }\r\n\r\n    return checks[dateKey].includes(itemID);\r\n  }\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Grid item xs={2} className={classes.leftNavigation}>\r\n          <Button color=\"inherit\" size=\"large\" onClick={() => changeDate(-1)}>&lt;&lt;</Button>\r\n        </Grid>\r\n        <Grid item xs={2} className={classes.monthName}>\r\n          <Typography variant=\"h4\">\r\n            { months[date.getMonth()] } {date.getFullYear()}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6} className={classes.rightNavigation}>\r\n          <Button color=\"inherit\" size=\"large\" onClick={() => changeDate(1)}>&gt;&gt;</Button>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Typography variant=\"h5\">\r\n            {percentCompleted()}%\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <TableContainer component={Container}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"right\" width={1}>SN</TableCell>\r\n              <TableCell width={10}>Item</TableCell>\r\n              { [...Array(new Date(date.getFullYear(), date.getMonth()+1, 0).getDate()).keys()].map(tableDate => (\r\n                <TableCell key={tableDate+1}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{tableDate+1}</TableCell>\r\n              )) }\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            { items.map((item, index) => (\r\n              <TableRow key={item.id}>\r\n                <TableCell align=\"right\">{index+1}</TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {item.name}\r\n                </TableCell>\r\n                { [...Array(new Date(date.getFullYear(), date.getMonth()+1, 0).getDate()).keys()].map(tableDate => (\r\n                  <TableCell key={tableDate+1} align=\"right\">\r\n                    <Checkbox\r\n                      checked={getCheck(tableDate, item.id)}\r\n                      onChange={() => changeCheck(new Date(date.getFullYear(), date.getMonth(), tableDate+1), item.id)}\r\n                      color=\"primary\"\r\n                    />\r\n                  </TableCell>\r\n                )) }\r\n              </TableRow>\r\n            )) }\r\n\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Month;\r\n","import React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flex: 1\r\n  },\r\n  smallAvatar: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n    color: theme.palette.getContrastText(grey[300]),\r\n    backgroundColor: grey[300],\r\n  },\r\n  shortList: {\r\n    width: '50%',\r\n    marginTop: theme.spacing(2),\r\n  }\r\n}))\r\n\r\nfunction Items({ date, setDate, items, addEditItem, handleCopyPress}){\r\n\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n\r\n  const classes = useStyles();\r\n\r\n  const [editing, setEditing] = useState(false);\r\n  const [fieldItem, setFieldItem] = useState('');\r\n  const [buttonContent, setButtonContent] = useState('Add');\r\n\r\n  const changeDate = offset => {\r\n    setDate(prevDate => {\r\n      return new Date(prevDate.getFullYear(), prevDate.getMonth()+offset, 1);\r\n    })\r\n  }\r\n\r\n  const handleAddEdit = (date, fieldItem) => {\r\n    addEditItem(date, fieldItem);\r\n    setFieldItem({id: 0, name: ''});\r\n    setEditing(false);\r\n  }\r\n\r\n  const handleEditAddPress = (action, item) => {\r\n    if (action === 'add'){\r\n      setFieldItem({id: 0, name: '', months: []});\r\n      setButtonContent('Add');\r\n    }\r\n\r\n    else if (action === 'edit'){\r\n      setFieldItem(item);\r\n      setButtonContent('Edit');\r\n    }\r\n\r\n    setEditing(true);\r\n  }\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n\r\n      <Grid container>\r\n        <Grid item xs={2}>\r\n          <Button color=\"inherit\" size=\"large\" onClick={() => changeDate(-1)}>&lt;&lt;</Button>\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <Typography variant=\"h4\">\r\n            { months[date.getMonth()] } {date.getFullYear()}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button color=\"inherit\" size=\"large\" onClick={() => changeDate(1)}>&gt;&gt;</Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <List className={classes.shortList}>\r\n        { items.map((item, index) => (\r\n          <ListItem key={item.id}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.smallAvatar}>\r\n                {index+1}\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n              primary={item.name}\r\n            />\r\n            <ListItemSecondaryAction>\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"edit\"\r\n                onClick={() => handleEditAddPress('edit', item)}\r\n              >\r\n                <Tooltip title=\"Edit\">\r\n                  <EditIcon />\r\n                </Tooltip>\r\n              </IconButton>\r\n\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"copy\"\r\n                onClick={() => handleCopyPress([item.id])}\r\n              >\r\n                <Tooltip title=\"Copy to current month\">\r\n                  <FileCopyIcon />\r\n                </Tooltip>\r\n              </IconButton>\r\n\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        )) }\r\n        <ListItem>\r\n          <ListItemAvatar>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"add\"\r\n              onClick={() => handleEditAddPress('add', {})}\r\n            >\r\n              <Tooltip title=\"Add\">\r\n                <AddCircleIcon />\r\n              </Tooltip>\r\n            </IconButton>\r\n          </ListItemAvatar>\r\n\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"copy-all\"\r\n              onClick={() => handleCopyPress(items.map(item => (item.id)))}\r\n            >\r\n              <Tooltip title=\"Copy all items to current month\">\r\n                <FileCopyIcon />\r\n              </Tooltip>\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </List>\r\n\r\n      {editing &&\r\n        <>\r\n          <TextField\r\n            autoFocus={true}\r\n            label=\"Item\"\r\n            value={fieldItem.name}\r\n            onChange={event => { setFieldItem(prevFieldItem => ({...prevFieldItem, name: event.target.value})) }}\r\n          />\r\n          <Button onClick={() => handleAddEdit(date, fieldItem)}>{buttonContent}</Button>\r\n        </>\r\n      }\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Items;\r\n","const getNextID = object => {\r\n  let lastIDs = localStorage.getItem('lastIDs');\r\n  let idToReturn;\r\n  if (lastIDs === null){\r\n    idToReturn = '1';\r\n\r\n    lastIDs = {}\r\n    lastIDs[object] = '2';\r\n  }\r\n\r\n  else {\r\n    lastIDs = JSON.parse(lastIDs);\r\n    idToReturn = lastIDs[object];\r\n\r\n    lastIDs[object] = (parseInt(lastIDs[object]) + 1).toString()\r\n  }\r\n\r\n  localStorage.setItem('lastIDs', JSON.stringify(lastIDs))\r\n\r\n  return idToReturn;\r\n}\r\n\r\nconst saveContent = (key, data) => {\r\n  localStorage.setItem(key, JSON.stringify(data));\r\n}\r\n\r\nconst getContent = key => {\r\n  const data = localStorage.getItem(key);\r\n  if (data === null){\r\n    return data;\r\n  }\r\n  else {\r\n    return JSON.parse(data);\r\n  }\r\n}\r\n\r\n\r\nexport { saveContent, getContent, getNextID };\r\n","import React, { useState, useEffect } from 'react';\n\nimport Calendar from './components/Calendar';\nimport Month from './components/Month';\nimport Items from './components/Items';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Container from '@material-ui/core/Container';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { saveContent, getContent, getNextID } from './storage';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBar: {\n    boxShadow: 'none',\n  }\n}))\n\nfunction App() {\n\n  // views = ['calendar', 'month', 'items']\n  const [view, setView] = useState('calendar');\n  const [date, setDate] = useState(new Date());\n  const [items, setItems] = useState(() => {\n    const items = getContent('items');\n    if (items === null){\n      return [];\n    }\n\n    else {\n      return items;\n    }\n  });\n\n  const [checks, setChecks] = useState(() => {\n    const checks = getContent('checks');\n    if (checks === null){\n      return {}\n    }\n\n    else {\n      return checks;\n    }\n  });\n\n  useEffect(() => {\n    saveContent('items', items);\n  }, [items]);\n\n  useEffect(() => {\n    saveContent('checks', checks);\n  }, [checks]);\n\n  const nextID = item => {\n    return getNextID('items');\n  }\n\n  const handleCopyPress = items => {\n    items.forEach(item => {\n      setItems(prevItems => {\n        let newItems = [];\n\n        prevItems.forEach(prevItem => {\n          if (prevItem.id === item){\n            newItems.push(\n              {\n                id: prevItem.id,\n                name: prevItem.name,\n                months: [...prevItem.months, new Date().getMonth().toString() + \"-\" + new Date().getYear().toString()]\n              }\n            );\n          }\n          else {\n            newItems.push(prevItem);\n          }\n        })\n\n        return newItems;\n      })\n    })\n  }\n\n  const addEditItem = (date, newItem) => {\n    if (newItem.id === 0){\n      setItems(prevItem => {\n        return [ ...prevItem, {\n          id: nextID('item'),\n          name: newItem.name,\n          months: [date.getMonth().toString() + \"-\" + date.getYear().toString()]\n        }]\n      })\n    }\n\n    else {\n      setItems(prevItems => {\n        let newItems = [];\n        prevItems.forEach(item => {\n          if(item.id === newItem.id){\n            newItems.push({\n              id: item.id,\n              name: newItem.name,\n              months: item.months\n            })\n          }\n          else {\n            newItems.push(item);\n          }\n        })\n        return newItems;\n      })\n    }\n  }\n\n  const changeCheck = (dateToChange, itemID) => {\n    setChecks(prevChecks => {\n\n      const monthKey =\n        dateToChange.getMonth().toString() + \"-\" +\n        dateToChange.getYear().toString();\n\n      const dateKey =\n        dateToChange.getDate().toString();\n\n      let prevChecksArray;\n      let prevChecksObject;\n\n      prevChecksObject = {...prevChecks};\n\n      if (prevChecks[monthKey] === undefined){\n        prevChecksObject[monthKey] = {}\n      }\n\n      if (prevChecksObject[monthKey][dateKey] === undefined){\n        prevChecksArray = [];\n      }\n\n      else {\n        prevChecksArray = prevChecksObject[monthKey][dateKey];\n      }\n\n      let newChecks = {...prevChecksObject};\n      if (prevChecksArray.includes(itemID)){\n        newChecks[monthKey][dateKey] = prevChecksArray.filter(item => item !== itemID)\n      }\n\n      else{\n        newChecks[monthKey][dateKey] = [...prevChecksArray, itemID];\n      }\n\n      return newChecks;\n\n    })\n  }\n\n  const getChecks = (checksFor, dateToFetch) => {\n    const checksMonth = date.getMonth().toString() + \"-\" + date.getYear().toString();\n\n    if(checksFor === 'month'){\n      if (checksMonth in checks){\n        return checks[checksMonth];\n      }\n      else {\n        return [];\n      }\n    }\n\n    else if(checksFor === 'day') {\n      const checksDay = date.getDate().toString();\n\n      if (checksMonth in checks && checksDay in checks[checksMonth]){\n        return checks[checksMonth][checksDay];\n      }\n\n      else {\n        return [];\n      }\n    }\n  }\n\n  const classes = useStyles();\n\n  return (\n      <Container maxWidth=\"lg\" className={classes.root}>\n        <AppBar\n          position=\"static\"\n          color=\"inherit\"\n          className={classes.appBar}\n        >\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Checklist App\n            </Typography>\n            <Button color=\"inherit\" onClick={() => setView('calendar')}>Calendar</Button>\n            <Button color=\"inherit\" onClick={() => setView('month')}>Month</Button>\n            <Button color=\"inherit\" onClick={() => setView('items')}>Items</Button>\n          </Toolbar>\n        </AppBar>\n\n        <Container maxWidth=\"lg\">\n          { (view === 'calendar') &&\n            <Calendar\n              date={date}\n              setDate={setDate}\n              items={items.filter(item => item.months.includes(date.getMonth().toString() + \"-\" + date.getYear().toString()))}\n              getChecks={getChecks}\n              changeCheck={changeCheck}\n            />\n          }\n\n          { (view === 'month') &&\n            <Month\n              date={date}\n              setDate={setDate}\n              items={items.filter(item => item.months.includes(date.getMonth().toString() + \"-\" + date.getYear().toString()))}\n              changeCheck={changeCheck}\n              getChecks={getChecks}\n            />\n          }\n\n          { (view === 'items') &&\n            <Items\n              date={date}\n              setDate={setDate}\n              items={items.filter(item => item.months.includes(date.getMonth().toString() + \"-\" + date.getYear().toString()))}\n              addEditItem={addEditItem}\n              handleCopyPress={handleCopyPress}\n            />\n          }\n        </Container>\n      </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: \"'Itim', cursive\",\n  }\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}